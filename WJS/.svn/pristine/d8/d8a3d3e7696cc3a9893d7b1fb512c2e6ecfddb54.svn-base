/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wjs.query;

import com.wjs.ebj.KnowledgeBean;
import com.wjs.entity.Knowledge;
import com.wjs.lazy.KnowlegdgeModel;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import org.primefaces.model.LazyDataModel;

/**
 *
 * @author kevintung
 */
@ManagedBean(name = "knowledgeQueryBean")
@RequestScoped
public class KnowledgeQueryBean {

    @EJB
    private KnowledgeBean knowledgeBean;

    private Knowledge currentEntity;
    private List<Knowledge> topList;

    private Knowledge prev;
    private Knowledge next;
    private boolean hasPrev;
    private boolean hasNext;

    private LazyDataModel model;

    @ManagedProperty("#{param.id}")
    private String id;

    /**
     * Creates a new instance of KnowledgeQueryManagedBean
     */
    public KnowledgeQueryBean() {
    }

    @PostConstruct
    public void construct() {
        init();
        setModel(new KnowlegdgeModel(knowledgeBean));
        if (id != null) {
            setCurrentEntity(knowledgeBean.getById(id));
            if (getCurrentEntity() != null) {
                setPrev(knowledgeBean.getPrevById(id));
                if (prev.getId() == 0) {
                    setHasPrev(false);
                } else {
                    setHasPrev(true);
                }
                setNext(knowledgeBean.getNextById(id));
                if (next.getId() == 0) {
                    setHasNext(false);
                } else {
                    setHasNext(true);
                }
            }
        }
    }

    @PreDestroy
    public void destroy() {
        if (getTopList() != null) {
            getTopList().clear();
            setTopList(null);
        }
        setCurrentEntity(null);
    }

    public void init() {
        setTopList(knowledgeBean.findTop());
        if (!getTopList().isEmpty()) {
            setCurrentEntity(getTopList().get(0));
        }
    }

    public String view(Knowledge entity) {
        if (entity != null) {
            setCurrentEntity(entity);
        }
        return "knowledgeDetail";
    }

    public String viewList() {
        return "knowledgeList";
    }

    /**
     * @return the knowledgeBean
     */
    public KnowledgeBean getKnowledgeBean() {
        return knowledgeBean;
    }

    /**
     * @param knowledgeBean the knowledgeBean to set
     */
    public void setKnowledgeBean(KnowledgeBean knowledgeBean) {
        this.knowledgeBean = knowledgeBean;
    }

    /**
     * @return the currentEntity
     */
    public Knowledge getCurrentEntity() {
        return currentEntity;
    }

    /**
     * @param currentEntity the currentEntity to set
     */
    public void setCurrentEntity(Knowledge currentEntity) {
        this.currentEntity = currentEntity;
    }

    /**
     * @return the topList
     */
    public List<Knowledge> getTopList() {
        return topList;
    }

    /**
     * @param topList the topList to set
     */
    public void setTopList(List<Knowledge> topList) {
        this.topList = topList;
    }

    /**
     * @return the model
     */
    public LazyDataModel getModel() {
        return model;
    }

    /**
     * @param model the model to set
     */
    public void setModel(LazyDataModel model) {
        this.model = model;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the prev
     */
    public Knowledge getPrev() {
        return prev;
    }

    /**
     * @param prev the prev to set
     */
    public void setPrev(Knowledge prev) {
        this.prev = prev;
    }

    /**
     * @return the next
     */
    public Knowledge getNext() {
        return next;
    }

    /**
     * @param next the next to set
     */
    public void setNext(Knowledge next) {
        this.next = next;
    }

    /**
     * @return the hasPrev
     */
    public boolean isHasPrev() {
        return hasPrev;
    }

    /**
     * @param hasPrev the hasPrev to set
     */
    public void setHasPrev(boolean hasPrev) {
        this.hasPrev = hasPrev;
    }

    /**
     * @return the hasNext
     */
    public boolean isHasNext() {
        return hasNext;
    }

    /**
     * @param hasNext the hasNext to set
     */
    public void setHasNext(boolean hasNext) {
        this.hasNext = hasNext;
    }

}
