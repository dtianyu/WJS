/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wjs.query;

import com.wjs.ebj.NoticeBean;
import com.wjs.entity.Notice;
import com.wjs.lazy.NoticeModel;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.RequestScoped;
import org.primefaces.model.LazyDataModel;

/**
 *
 * @author C0160
 */
@ManagedBean
@RequestScoped
public class NoticeQueryBean {
    
    @EJB
    private NoticeBean noticeBean;
    
    private Notice currentEntity;
    private List<Notice> topList;
    
    private Notice prev;
    private Notice next;    
    private boolean hasPrev;
    private boolean hasNext;
    
    private LazyDataModel<Notice> model;
    
    @ManagedProperty("#{param.id}")
    private String id;

    /**
     * Creates a new instance of NoticeRequestBean
     */
    public NoticeQueryBean() {
        
    }
    
    @PostConstruct
    public void construct() {
        init();
        model = new NoticeModel(noticeBean);
        if (id != null) {
            setCurrentEntity(noticeBean.getById(id));
            if (getCurrentEntity() != null) {
                setPrev(noticeBean.getPrevById(id));
                if (prev.getId() == 0) {
                    setHasPrev(false);
                } else {
                    setHasPrev(true);
                }
                setNext(noticeBean.getNextById(id));
                if (next.getId() == 0) {
                    setHasNext(false);
                } else {
                    setHasNext(true);
                }                
            }
        }
    }
    
    @PreDestroy
    public void destory() {
        if (getTopList() != null) {
            getTopList().clear();
            setTopList(null);
        }
        setCurrentEntity(null);
    }
    
    public void init() {
        setTopList(noticeBean.findTop());
        if (!getTopList().isEmpty()) {
            setCurrentEntity(getTopList().get(0));
        }
    }
    
    public String view() {
        return "noticeDetail";
    }
    
    public String viewList() {
        return "noticeList.xhtml";
    }

    /**
     * @return the currentEntity
     */
    public Notice getCurrentEntity() {
        return currentEntity;
    }

    /**
     * @param currentEntity the currentEntity to set
     */
    public void setCurrentEntity(Notice currentEntity) {
        this.currentEntity = currentEntity;
    }

    /**
     * @return the topNotice
     */
    public List<Notice> getTopList() {
        return topList;
    }

    /**
     * @param topList the topNotice to set
     */
    public void setTopList(List<Notice> topList) {
        this.topList = topList;
    }

    /**
     * @return the noticeBean
     */
    public NoticeBean getNoticeBean() {
        return noticeBean;
    }

    /**
     * @param noticeBean the noticeBean to set
     */
    public void setNoticeBean(NoticeBean noticeBean) {
        this.noticeBean = noticeBean;
    }

    /**
     * @return the model
     */
    public LazyDataModel getModel() {
        return model;
    }

    /**
     * @param model the model to set
     */
    public void setModel(LazyDataModel model) {
        this.model = model;
    }

    /**
     * @return the id
     */
    public String getId() {
        return id;
    }

    /**
     * @param id the id to set
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * @return the prev
     */
    public Notice getPrev() {
        return prev;
    }

    /**
     * @param prev the prev to set
     */
    public void setPrev(Notice prev) {
        this.prev = prev;
    }

    /**
     * @return the next
     */
    public Notice getNext() {
        return next;
    }

    /**
     * @param next the next to set
     */
    public void setNext(Notice next) {
        this.next = next;
    }

    /**
     * @return the hasPrev
     */
    public boolean isHasPrev() {
        return hasPrev;
    }

    /**
     * @param hasPrev the hasPrev to set
     */
    public void setHasPrev(boolean hasPrev) {
        this.hasPrev = hasPrev;
    }

    /**
     * @return the hasNext
     */
    public boolean isHasNext() {
        return hasNext;
    }

    /**
     * @param hasNext the hasNext to set
     */
    public void setHasNext(boolean hasNext) {
        this.hasNext = hasNext;
    }
    
}
