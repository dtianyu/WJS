/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.wjs.ebj;

import com.wjs.entity.Notice;
import com.wjs.sbi.EJBOperate;
import java.util.List;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 *
 * @author kevintung
 */
@Stateless
@LocalBean
public class NoticeBean implements EJBOperate<Notice> {

    @PersistenceContext(unitName = "WJS-ejbPU")
    private EntityManager em;

    @Override
    public void delete(Notice entity) {
        try {
            if (em.contains(entity)) {
                em.remove(entity);
            } else {
                em.remove(em.merge(entity));
            }
        } catch (Exception e) {
            throw new Error(e.toString());
        }
    }

    @Override
    public void persist(Notice entity) {
        try {
            em.persist(entity);
        } catch (Exception e) {
            throw new Error(e.toString());
        }
    }

    @Override
    public Notice getById(String value) {
        Query query = em.createNamedQuery("Notice.findById");
        query.setParameter("id", Integer.parseInt(value));
        return (Notice) query.getSingleResult();
    }

    @Override
    public List<Notice> getByPId(String value) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getRowCount() {
        Query query = em.createNamedQuery("Notice.findRowCount");
        return Integer.parseInt(query.getSingleResult().toString());
    }

    @Override
    public List<Notice> retrieve() {
        Query query = em.createNamedQuery("Notice.findVerified");
        return query.getResultList();
    }

    @Override
    public List<Notice> retrieve(int first, int pageSize) {
        Query query = em.createNamedQuery("Notice.findVerified").setFirstResult(first).setMaxResults(first + pageSize);
        return query.getResultList();
    }

    @Override
    public Notice update(Notice entity) {
        try {
            Notice n = em.merge(entity);
            return n;
        } catch (Exception e) {
            throw new Error(e.toString());
        }
    }

    public List<Notice> findAll() {
        Query query = em.createNamedQuery("Notice.findAll");
        return query.getResultList();
    }

    public List<Notice> findTop() {
        Query query = em.createNamedQuery("Notice.findTop").setFirstResult(0).setMaxResults(10);
        return query.getResultList();
    }
}
